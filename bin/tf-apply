#!/usr/bin/env bash

set -e

function set_env() {
  export NGINX_TCP_IP_ADDR=$(kubectl -n nginx-tcp get svc -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}' 2> /dev/null)
  export COREDNS_CLUSTER_IP=$(kubectl -n coredns get svc coredns-coredns -o jsonpath='{.spec.clusterIP}' 2> /dev/null)
  KUBE_ADDR_2ND_OCTET=$(kubectl get nodes -o wide -o=jsonpath={.items[0].status.addresses[0].address} | cut -d'.' -f2)
  export KUBE_ADDR="172.${KUBE_ADDR_2ND_OCTET}.255.200"
  export METALLB_IP_RANGE="${KUBE_ADDR}-172.${KUBE_ADDR_2ND_OCTET}.255.202"
  envsubst < ./terraform/kubernetes/kube-system/configmap/coredns/Corefile.template > ./terraform/kubernetes/kube-system/configmap/coredns/Corefile
  envsubst < ./terraform/.tfvars.template > ./terraform/.tfvars
}

function init_creation() {
  cd terraform
  if [ "init" == "$1" ]
  then
    terraform init
  fi
  terraform apply -auto-approve -var-file=".tfvars"
}

function update_dns() {
  export COREDNS_CLUSTER_IP=$(kubectl -n coredns get svc coredns-coredns -o jsonpath='{.spec.clusterIP}' 2> /dev/null)
  export NGINX_TCP_IP_ADDR=$(kubectl -n nginx-tcp get svc -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}')
  envsubst < ./terraform/kubernetes/kube-system/configmap/coredns/Corefile.template > ./terraform/kubernetes/kube-system/configmap/coredns/Corefile
  envsubst < .tfvars.template > .tfvars
  terraform apply -auto-approve -var-file=".tfvars"
}

function main() {
  set_env
  init_creation $1
  update_dns
}

main
